
name: Deploy to salesforcetest environment on push to main

on:
  push:
    branches: [ main ]
    paths:
      - 'force-app/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: salesforcetest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  #Checks out the latest code from GitHub, compare the last two commits

      # Sets up the Node.js environment (version 18), required for LWC, Prettier, ESLint, and test scripts
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Installs all Node.js dependencies defined in the package.json
      - name: Install dependencies
        run: npm install

      # Ensures code follows formatting rules defined by Prettier.
      - name: Run Prettier (verify)
        run: npm run prettier:verify

      # Lints the code to detect and prevent bugs, bad practices, or code style violations
      - name: Run ESLint
        run: npm run lint

      # Runs unit tests for Lightning Web Components and checks test coverage to ensure the components are well-tested.
      - name: Run LWC unit tests with coverage
        run: npm run test:unit:coverage

      # Installs the Salesforce CLI globally, which is used to run Salesforce-related commands
      - name: Install Salesforce CLI
        run: npm install @salesforce/cli --global

      # compares git commits and generates a delta, speeding up deployments by pushing only changed files
      - name: Install sfdx-git-delta plugin
        run: |
          echo Y | sfdx plugins:install sfdx-git-delta
          sfdx plugins

      # Compares latest and previous commits, Outputs only the changed files into the changed-sources/ folder 
      # to prepare for a smaller and faster deployment.
      - name: Create delta packages
        run: |
          mkdir changed-sources
          sf sgd source delta --to "HEAD" --from "HEAD~1" --output changed-sources/ --generate-delta --source force-app/
          echo "[INFO] Diff generated"

      - name: Authenticate to Salesforce using JWT
        run: |
          echo "${{ secrets.JWT_SERVER_KEY }}" > server.key
          sf org login jwt \
            --username ${{ secrets.DEPLOYMENT_USER_NAME }} \
            --jwt-key-file server.key \
            --client-id ${{ secrets.CONSUMER_KEY }} \
            --instance-url ${{ vars.INSTANCE_URL }} \
            --set-default

      - name: Deploy delta package to Salesforce
        run: |
          sf project deploy start \
            --source-dir changed-sources/force-app \
            --test-level RunLocalTests \
            --wait 10
# new above





# name: Deploy to salesforcetest environment on push to main

# on:
#   push:
#     branches: [ main ]
#     paths:
#       - 'force-app/**'

# jobs:
#   Deploy-to-salesforcetest-environment:
#       runs-on: ubuntu-latest
#       environment: salesforcetest
#       steps:
#           - uses: actions/setup-node@v3
#             with:
#               node-version: '18'
#           - name: 'Checkout source code'
#             uses: actions/checkout@v3
#             with:
#               fetch-depth: '2'
                
#           # Now Install Salesforce CLI
#           - name: 'Install sfdx'
#             run: npm install @salesforce/cli --global
#           - name: 'Installing sfdx git delta'
#             run: | 
#                 echo Y | sfdx plugins:install sfdx-git-delta
#                 sfdx plugins

#           - name: 'Create delta packages'
#             run: | 
#                 mkdir changed-sources
#                 sf sgd source delta --to "HEAD" --from "HEAD~1" --output changed-sources/ --generate-delta --source force-app/
#                 echo "[INFO] Diff generated"
                
#           - name: 'Deploy to environment with running all local tests'
#             run: |
#                 echo "${{ secrets.JWT_SERVER_KEY }}" > server.key
#                 sf org login jwt --username ${{ secrets.DEPLOYMENT_USER_NAME }} --jwt-key-file server.key --client-id ${{ secrets.CONSUMER_KEY }} --instance-url ${{ vars.INSTANCE_URL }} --set-default
#                 sf project deploy start --source-dir changed-sources/force-app --test-level NoTestRun


# # Unique name for this workflow
# name: CI on PR

# # Defination when the workflow should run
# on:
#   workflow_dispatch:
#   pull_request:
#     types: [opened, edited, synchronize]

# # Jobs to be executed
# jobs:
#   # Format, lint, test
#   format-lint-lwc-tests:
#     runs-on: ubuntu-latest
#     steps:
#       # Checkout the source code
#       - name: 'Checkout source code'
#         uses: actions/checkout@v3
#       # Install Volta to enforce proper node and package manager versions
#       - name: 'Install Volta'
#         uses: volta-cli/action@v4
#       # Cache node_modules to speed up the process
#       - name: 'Restore node_modules cache'
#         id: cache-npm
#         uses: actions/cache@v3
#         with:
#           path: node_modules
#           key: npm-${{ hashFiles('**/package-lock.json')}}
#           restore-keys: |
#             npm-${{ env.cache-name }}-
#             npm-
#       # Install npm dependencies for Prettier and Jest
#       - name: 'Install npm dependencies'
#         if: steps.cache-npm.outputs.cache-hit !='true'
#         run: npm ci
        
#       # Prettier formatting
#       - name: 'Code formatting verification with Prettier'
#         run: npm run prettier:verify

#       # Lint LWC / Aura
#       - name: 'Lint Lightning Web Components / Aura Components'
#         run: npm run lint
      
#       # LWC unit tests
#       - name: 'Unit test Lightning Web Components'
#         run: npm run test:unit:coverage

#       # Upload code coverage data
#       - name: 'Upload code coverage for LWC to Codecov.io'
#         uses: codecov/codecov-action@v3
#         with:
#           flags: LWC

#   Scratch-org-test:
#     runs-on: ubuntu-latest
#     needs: format-lint-lwc-tests
#     if: ${{ github.actor != 'dependabot[bot]'}}
#     steps:
#       # Checkout the source code
#       - name: 'Checkout source code'
#         uses: actions/checkout@v3

#       # Run PMD scan
#       - name: 'Run PMD scan'
#         uses: pmd/pmd-github-action@v1.4.0
#         id: pmd
#         with:
#           version: '6.55.0'
#           sourcePath: 'force-app'
#           rulesets: 'ruleset.xml'

#       # Install Salesforce CLI
#       - name: 'Install Salesforce CLI'
#         run: |
#           npm install @salesforce/cli --location=global
#           nodeInstallPath=$(npm config get prefix)
#           echo "$nodeInstallPath/bin" >> $GITHUB_PATH
#           sf --version

#       # Store secret for dev hub
#       - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
#         shell: bash
#         run: |
#           echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
#           secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
#           if [ $secretFileSize ==1 ]; then
#               echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
#               exit 1;
#           fi
#       # Authenticate dev hub
#       - name: 'Authenticate Dev Hub'
#         run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d
      
#       # Create scratch org
#       - name: 'Create scratch org'
#         run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1

#       # Deploy source to scratch org
#       - name: 'Push source to scratch org'
#         run: sf project deploy start

#       # Assign permissionset
#       - name: 'Assign permissionset to default user'
#         run: sf org assign permset -n dreamhouse
      
#       # Import sample data
#       - name: 'Import sample data'
#         run: sf data tree import -p ./data/sample-data-plan.json

#       # Run Apex tests in scratch org
#       - name: 'Run Apex tests'
#         run: sf apex test run -c -r human -d ./tests/apex -w 20
      
#       # Upload code coverage data
#       - name: 'Upload code coverage for Apex to Codecov.io'
#         uses: codecov/codecov-action@v3
#         with:
#           flags: Apex

#       # Housekeeping
#       - name: 'Delete scratch org'
#         if: always()
#         run: sf org delete scratch -p -o scratch-org
      
